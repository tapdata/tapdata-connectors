package io.tapdata.connector.postgres;

import io.tapdata.common.CommonSqlMaker;
import io.tapdata.connector.postgres.bean.PostgresColumn;
import io.tapdata.entity.schema.TapField;
import io.tapdata.kit.EmptyKit;
import io.tapdata.kit.StringKit;
import io.tapdata.pdk.apis.entity.Collate;
import io.tapdata.pdk.apis.entity.SortOn;
import io.tapdata.pdk.apis.entity.TapAdvanceFilter;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static io.tapdata.pdk.apis.entity.SortOn.ASCENDING;

public class PostgresSqlMaker extends CommonSqlMaker {

    private char escapeChar = '"';

    protected void buildDataTypeDefinition(StringBuilder builder, TapField tapField) {
        if (createAutoInc && Boolean.TRUE.equals(tapField.getAutoInc()) && tapField.getDataType().startsWith("numeric")) {
            builder.append(escapeChar).append(tapField.getName()).append(escapeChar).append(" bigint ");
        } else {
            super.buildDataTypeDefinition(builder, tapField);
        }
    }

    protected void buildNullDefinition(StringBuilder builder, TapField tapField) {
        boolean nullable = !(EmptyKit.isNotNull(tapField.getNullable()) && !tapField.getNullable());
        if (closeNotNull) {
            nullable = true;
        }
        if (!nullable || tapField.getPrimaryKey()) {
            builder.append("NOT NULL").append(' ');
        }
    }

    protected void buildDefaultDefinition(StringBuilder builder, TapField tapField) {
        if (EmptyKit.isNotNull(dbVersion) && Integer.parseInt(dbVersion) < 100000 && EmptyKit.isNotBlank(tapField.getSequenceName())) {
            return;
        }
        if (EmptyKit.isNotNull(tapField.getDefaultValue())) {
            builder.append("DEFAULT").append(' ');
            if (EmptyKit.isNotNull(tapField.getDefaultFunction())) {
                String function = PostgresColumn.PostgresDefaultFunction.valueOf(tapField.getDefaultFunction().toString()).getFunction();
                if (function.contains(".*")) {
                    builder.append(tapField.getDefaultValue()).append(' ');
                } else {
                    builder.append(function).append(' ');
                }
            } else if (tapField.getDefaultValue() instanceof Number) {
                builder.append(tapField.getDefaultValue()).append(' ');
            } else if (EmptyKit.isNotBlank(tapField.getSequenceName())) {
                builder.append("nextval('\"").append(StringKit.escape(schema, "'\"")).append("\".\"").append(StringKit.escape(tapField.getSequenceName(), "'\"")).append("\"') ");
            } else {
                builder.append("'").append(tapField.getDefaultValue()).append("' ");
            }
        }
    }

    protected void buildAutoIncDefinition(StringBuilder builder, TapField tapField) {
        if (EmptyKit.isNotBlank(tapField.getSequenceName())) {
            return;
        }
        long startValue;
        if (EmptyKit.isNotNull(tapField.getAutoIncStartValue())) {
            startValue = tapField.getAutoIncStartValue();
        } else {
            startValue = 1;
        }
        long incrementValue;
        if (EmptyKit.isNotNull(tapField.getAutoIncrementValue())) {
            incrementValue = tapField.getAutoIncrementValue();
        } else {
            incrementValue = 1;
        }
        builder.append("GENERATED BY DEFAULT AS IDENTITY (START WITH ")
                .append(startValue)
                .append(" INCREMENT BY ")
                .append(incrementValue)
                .append(" CACHE ")
                .append(autoIncCacheValue)
                .append(") ");
    }

    @Override
    public void buildWhereClause(StringBuilder builder, TapAdvanceFilter filter) {
        if (EmptyKit.isNotEmpty(filter.getMatch()) || EmptyKit.isNotEmpty(filter.getOperators())) {
            builder.append(" WHERE ");
            builder.append(buildKeyAndValue(filter.getMatch(), "AND", "=", filter.getCollateList()));
        }
        if (EmptyKit.isNotEmpty(filter.getOperators())) {
            if (EmptyKit.isNotEmpty(filter.getMatch())) {
                builder.append("AND ");
            }
            builder.append(filter.getOperators().stream().map(v -> queryOperatorToString(v, String.valueOf(escapeChar))).collect(Collectors.joining(" AND "))).append(' ');
        }
    }

    public String buildKeyAndValue(Map<String, Object> record, String splitSymbol, String operator, List<Collate> collateList) {
        StringBuilder builder = new StringBuilder();
        if (EmptyKit.isNotEmpty(record)) {
            record.forEach((fieldName, value) -> {
                if (null != value) {
                    builder.append(escapeChar).append(fieldName).append(escapeChar).append(operator);
                    builder.append(buildValueString(value));
                    Collate collate = EmptyKit.isEmpty(collateList) ? null : collateList.stream()
                            .filter(c -> c.getFieldName().equals(fieldName))
                            .findFirst()
                            .orElse(null);
                    if (null != collate) {
                        builder.append(' ').append(buildCollate(collate.getCollateName()));
                    }
                } else {
                    builder.append(escapeChar).append(fieldName).append(escapeChar).append(' ');
                    builder.append("IS NULL");
                }
                builder.append(' ').append(splitSymbol).append(' ');
            });
            builder.delete(builder.length() - splitSymbol.length() - 1, builder.length());
        }
        return builder.toString();
    }

    public void buildOrderClause(StringBuilder builder, TapAdvanceFilter filter) {
        if (EmptyKit.isNotEmpty(filter.getSortOnList())) {
            builder.append("ORDER BY ");
            List<Collate> collateList = filter.getCollateList();
            builder.append(filter.getSortOnList().stream().map(v -> {
                Collate collate = null;
                if (EmptyKit.isNotEmpty(collateList)) {
                    collate = collateList.stream()
                            .filter(c -> c.getFieldName().equals(v.getKey()))
                            .findFirst()
                            .orElse(null);
                }
                if (null != collate) {
                    return getOrderByFieldClauseWithCollate(v, collate);
                } else {
                    return v.toString(String.valueOf(escapeChar));
                }
            }).collect(Collectors.joining(", "))).append(' ');
        }
    }

    protected String getOrderByFieldClauseWithCollate(SortOn sortOn, Collate collate) {
        StringBuilder sb = new StringBuilder();
        sb.append(escapeChar).append(sortOn.getKey()).append(escapeChar);
        sb.append(' ').append(buildCollate(collate.getCollateName())).append(' ');
        sb.append((sortOn.getSort() == ASCENDING ? "ASC" : "DESC"));
        return sb.toString();
    }

    protected String buildCollate(String collateName) {
        return COLLATE + ' ' + escapeChar + collateName + escapeChar;
    }

}
